/* Utility variable â€” you should never need to modify this */
@gridsystem_width: @grid-columns * 1px;
@padding: @grid-gutter-width*0.5;
@correction: 0.5 / @grid-max-width * 100 * 1%; // NOTE: Check this in IE

/* Ensure grid columns are set to border-boxes. This is essential */
.border-box(){
    -webkit-box-sizing: border-box; 
    -moz-box-sizing: border-box; 
    box-sizing: border-box;
}

.content-box(){
    -webkit-box-sizing: content-box;
    -moz-box-sizing: content-box;
    box-sizing: content-box;
}

/* Our row container */
.row(@padding:0){
    .clearfix();
    .border-box();

    display:block;
    /*max-width: @grid-max-width; NO MAX WIDTH*/
    margin-right: auto;
    margin-left: auto;
    padding-right: @padding;
    padding-left: @padding;
}

.row-flush(){
    margin-left:-@padding;
    margin-right:-@padding;
}

/* Our column container */
.column(@x, @padding:@padding, @grid-columns:@grid-columns){
    .border-box();

    display: inline;
    float: left;
    width: 100%*(@x / @grid-columns);
    padding-right: @padding;
    padding-left: @padding;
}

.table-column(@x, @padding:@padding, @grid-columns:@grid-columns){
    .border-box();

    width: 100%*(@x / @grid-columns);
}

/* Push adds left padding */
.push(@offset:1, @grid-columns:@grid-columns) {
    margin-left: 100%*(@offset / @grid-columns);
}
.push-padding(@offset:1, @grid-columns:@grid-columns) {
    padding-left:100%*(@offset / @grid-columns);
}

/* Pull adds right padding */
.pull(@offset:1, @grid-columns:@grid-columns) {
    margin-right: 100%*(@offset / @grid-columns);
}
.pull-padding(@offset:1, @grid-columns:@grid-columns){
    padding-right: 100%*(@offset / @grid-columns);
}

/* only used in places where padding not applied to same elements as row or row-flush 
 * most of the time this class should be applied directly to the html elements */
.nice-padding(){
    padding-left:20px;
    padding-right:20px;

    @media screen and (min-width: @breakpoint-mobile){
        padding-left:50px;
        padding-right:50px;
    }
}